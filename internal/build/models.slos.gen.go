// Package kbapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package kbapi

import (
	"encoding/json"
	"net/http"
)

// SLOs400Response defines model for SLOs_400_response.
type SLOs400Response struct {
	Error      string  `json:"error"`
	Message    string  `json:"message"`
	StatusCode float32 `json:"statusCode"`
}

// SLOs401Response defines model for SLOs_401_response.
type SLOs401Response struct {
	Error      string  `json:"error"`
	Message    string  `json:"message"`
	StatusCode float32 `json:"statusCode"`
}

// SLOs403Response defines model for SLOs_403_response.
type SLOs403Response struct {
	Error      string  `json:"error"`
	Message    string  `json:"message"`
	StatusCode float32 `json:"statusCode"`
}

// SLOs404Response defines model for SLOs_404_response.
type SLOs404Response struct {
	Error      string  `json:"error"`
	Message    string  `json:"message"`
	StatusCode float32 `json:"statusCode"`
}

// SLOs409Response defines model for SLOs_409_response.
type SLOs409Response struct {
	Error      string  `json:"error"`
	Message    string  `json:"message"`
	StatusCode float32 `json:"statusCode"`
}

// SLOsBudgetingMethod The budgeting method to use when computing the rollup data.
type SLOsBudgetingMethod = string

// SLOsCreateSloRequest The create SLO API request body varies depending on the type of indicator, time window and budgeting method.
type SLOsCreateSloRequest struct {
	// BudgetingMethod The budgeting method to use when computing the rollup data.
	BudgetingMethod SLOsBudgetingMethod `json:"budgetingMethod"`

	// Description A description for the SLO.
	Description string `json:"description"`

	// GroupBy optional group by field or fields to use to generate an SLO per distinct value
	GroupBy *SLOsGroupBy `json:"groupBy,omitempty"`

	// Id A optional and unique identifier for the SLO. Must be between 8 and 36 chars
	Id        *string                        `json:"id,omitempty"`
	Indicator SLOsCreateSloRequest_Indicator `json:"indicator"`

	// Name A name for the SLO.
	Name string `json:"name"`

	// Objective Defines properties for the SLO objective
	Objective SLOsObjective `json:"objective"`

	// Settings Defines properties for SLO settings.
	Settings *SLOsSettings `json:"settings,omitempty"`

	// Tags List of tags
	Tags *[]string `json:"tags,omitempty"`

	// TimeWindow Defines properties for the SLO time window
	TimeWindow SLOsTimeWindow `json:"timeWindow"`
}

// SLOsCreateSloRequest_Indicator defines model for SLOsCreateSloRequest.Indicator.
type SLOsCreateSloRequest_Indicator struct {
	union json.RawMessage
}

// SLOsCreateSloResponse defines model for SLOs_create_slo_response.
type SLOsCreateSloResponse struct {
	Id string `json:"id"`
}

// SLOsDeleteSloInstancesRequest The delete SLO instances request takes a list of SLO id and instance id, then delete the rollup and summary data. This API can be used to remove the staled data of an instance SLO that no longer get updated.
type SLOsDeleteSloInstancesRequest struct {
	// List An array of slo id and instance id
	List []struct {
		// InstanceId The SLO instance identifier
		InstanceId string `json:"instanceId"`

		// SloId The SLO unique identifier
		SloId string `json:"sloId"`
	} `json:"list"`
}

// SLOsErrorBudget defines model for SLOs_error_budget.
type SLOsErrorBudget struct {
	// Consumed The error budget consummed, as a percentage of the initial value.
	Consumed float32 `json:"consumed"`

	// Initial The initial error budget, as 1 - objective
	Initial float32 `json:"initial"`

	// IsEstimated Only for SLO defined with occurrences budgeting method and calendar aligned time window.
	IsEstimated bool `json:"isEstimated"`

	// Remaining The error budget remaining, as a percentage of the initial value.
	Remaining float32 `json:"remaining"`
}

// SLOsFilter Defines properties for a filter
type SLOsFilter struct {
	// Meta Defines properties for a filter
	Meta  *SLOsFilterMeta         `json:"meta,omitempty"`
	Query *map[string]interface{} `json:"query,omitempty"`
}

// SLOsFilterMeta Defines properties for a filter
type SLOsFilterMeta struct {
	Alias        *string                 `json:"alias"`
	ControlledBy *string                 `json:"controlledBy,omitempty"`
	Disabled     *bool                   `json:"disabled,omitempty"`
	Field        *string                 `json:"field,omitempty"`
	Group        *string                 `json:"group,omitempty"`
	Index        *string                 `json:"index,omitempty"`
	IsMultiIndex *bool                   `json:"isMultiIndex,omitempty"`
	Key          *string                 `json:"key,omitempty"`
	Negate       *bool                   `json:"negate,omitempty"`
	Params       *map[string]interface{} `json:"params,omitempty"`
	Type         *string                 `json:"type,omitempty"`
	Value        *string                 `json:"value,omitempty"`
}

// SLOsFindSloDefinitionsResponse A paginated response of SLO definitions matching the query.
type SLOsFindSloDefinitionsResponse struct {
	union json.RawMessage
}

// SLOsFindSloDefinitionsResponse0 defines model for .
type SLOsFindSloDefinitionsResponse0 struct {
	Page    *float32                      `json:"page,omitempty"`
	PerPage *float32                      `json:"perPage,omitempty"`
	Results *[]SLOsSloWithSummaryResponse `json:"results,omitempty"`
	Total   *float32                      `json:"total,omitempty"`
}

// SLOsFindSloDefinitionsResponse1 defines model for .
type SLOsFindSloDefinitionsResponse1 struct {
	// Page for backward compability
	Page *float32 `json:"page,omitempty"`

	// PerPage for backward compability
	PerPage *float32                      `json:"perPage,omitempty"`
	Results *[]SLOsSloWithSummaryResponse `json:"results,omitempty"`

	// SearchAfter the cursor to provide to get the next paged results
	SearchAfter *[]string `json:"searchAfter,omitempty"`
	Size        *float32  `json:"size,omitempty"`
	Total       *float32  `json:"total,omitempty"`
}

// SLOsFindSloResponse A paginated response of SLOs matching the query.
type SLOsFindSloResponse struct {
	Page        *float32                      `json:"page,omitempty"`
	PerPage     *float32                      `json:"perPage,omitempty"`
	Results     *[]SLOsSloWithSummaryResponse `json:"results,omitempty"`
	SearchAfter *string                       `json:"searchAfter,omitempty"`

	// Size Size provided for cursor based pagination
	Size  *float32 `json:"size,omitempty"`
	Total *float32 `json:"total,omitempty"`
}

// SLOsGroupBy optional group by field or fields to use to generate an SLO per distinct value
type SLOsGroupBy struct {
	union json.RawMessage
}

// SLOsGroupBy0 defines model for .
type SLOsGroupBy0 = string

// SLOsGroupBy1 defines model for .
type SLOsGroupBy1 = []string

// SLOsIndicatorPropertiesApmAvailability Defines properties for the APM availability indicator type
type SLOsIndicatorPropertiesApmAvailability struct {
	// Params An object containing the indicator parameters.
	Params struct {
		// Environment The APM service environment or "*"
		Environment string `json:"environment"`

		// Filter KQL query used for filtering the data
		Filter *string `json:"filter,omitempty"`

		// Index The index used by APM metrics
		Index string `json:"index"`

		// Service The APM service name
		Service string `json:"service"`

		// TransactionName The APM transaction name or "*"
		TransactionName string `json:"transactionName"`

		// TransactionType The APM transaction type or "*"
		TransactionType string `json:"transactionType"`
	} `json:"params"`

	// Type The type of indicator.
	Type string `json:"type"`
}

// SLOsIndicatorPropertiesApmLatency Defines properties for the APM latency indicator type
type SLOsIndicatorPropertiesApmLatency struct {
	// Params An object containing the indicator parameters.
	Params struct {
		// Environment The APM service environment or "*"
		Environment string `json:"environment"`

		// Filter KQL query used for filtering the data
		Filter *string `json:"filter,omitempty"`

		// Index The index used by APM metrics
		Index string `json:"index"`

		// Service The APM service name
		Service string `json:"service"`

		// Threshold The latency threshold in milliseconds
		Threshold float32 `json:"threshold"`

		// TransactionName The APM transaction name or "*"
		TransactionName string `json:"transactionName"`

		// TransactionType The APM transaction type or "*"
		TransactionType string `json:"transactionType"`
	} `json:"params"`

	// Type The type of indicator.
	Type string `json:"type"`
}

// SLOsIndicatorPropertiesCustomKql Defines properties for a custom query indicator type
type SLOsIndicatorPropertiesCustomKql struct {
	// Params An object containing the indicator parameters.
	Params struct {
		// DataViewId The kibana data view id to use, primarily used to include data view runtime mappings. Make sure to save SLO again if you add/update run time fields to the data view and if those fields are being used in slo queries.
		DataViewId *string `json:"dataViewId,omitempty"`

		// Filter Defines properties for a filter
		Filter *SLOsKqlWithFilters `json:"filter,omitempty"`

		// Good The KQL query used to define the good events.
		Good SLOsKqlWithFiltersGood `json:"good"`

		// Index The index or index pattern to use
		Index string `json:"index"`

		// TimestampField The timestamp field used in the source indice.
		TimestampField string `json:"timestampField"`

		// Total The KQL query used to define all events.
		Total SLOsKqlWithFiltersTotal `json:"total"`
	} `json:"params"`

	// Type The type of indicator.
	Type string `json:"type"`
}

// SLOsIndicatorPropertiesCustomMetric Defines properties for a custom metric indicator type
type SLOsIndicatorPropertiesCustomMetric struct {
	// Params An object containing the indicator parameters.
	Params struct {
		// DataViewId The kibana data view id to use, primarily used to include data view runtime mappings. Make sure to save SLO again if you add/update run time fields to the data view and if those fields are being used in slo queries.
		DataViewId *string `json:"dataViewId,omitempty"`

		// Filter the KQL query to filter the documents with.
		Filter *string `json:"filter,omitempty"`

		// Good An object defining the "good" metrics and equation
		Good struct {
			// Equation The equation to calculate the "good" metric.
			Equation string `json:"equation"`

			// Metrics List of metrics with their name, aggregation type, and field.
			Metrics []SLOsIndicatorPropertiesCustomMetric_Params_Good_Metrics_Item `json:"metrics"`
		} `json:"good"`

		// Index The index or index pattern to use
		Index string `json:"index"`

		// TimestampField The timestamp field used in the source indice.
		TimestampField string `json:"timestampField"`

		// Total An object defining the "total" metrics and equation
		Total struct {
			// Equation The equation to calculate the "total" metric.
			Equation string `json:"equation"`

			// Metrics List of metrics with their name, aggregation type, and field.
			Metrics []SLOsIndicatorPropertiesCustomMetric_Params_Total_Metrics_Item `json:"metrics"`
		} `json:"total"`
	} `json:"params"`

	// Type The type of indicator.
	Type string `json:"type"`
}

// SLOsIndicatorPropertiesCustomMetricParamsGoodMetrics0 defines model for .
type SLOsIndicatorPropertiesCustomMetricParamsGoodMetrics0 struct {
	// Aggregation The aggregation type of the metric.
	Aggregation string `json:"aggregation"`

	// Field The field of the metric.
	Field string `json:"field"`

	// Filter The filter to apply to the metric.
	Filter *string `json:"filter,omitempty"`

	// Name The name of the metric. Only valid options are A-Z
	Name string `json:"name"`
}

// SLOsIndicatorPropertiesCustomMetricParamsGoodMetrics1 defines model for .
type SLOsIndicatorPropertiesCustomMetricParamsGoodMetrics1 struct {
	// Aggregation The aggregation type of the metric.
	Aggregation string `json:"aggregation"`

	// Filter The filter to apply to the metric.
	Filter *string `json:"filter,omitempty"`

	// Name The name of the metric. Only valid options are A-Z
	Name string `json:"name"`
}

// SLOsIndicatorPropertiesCustomMetric_Params_Good_Metrics_Item defines model for SLOs_indicator_properties_custom_metric.params.good.metrics.Item.
type SLOsIndicatorPropertiesCustomMetric_Params_Good_Metrics_Item struct {
	union json.RawMessage
}

// SLOsIndicatorPropertiesCustomMetricParamsTotalMetrics0 defines model for .
type SLOsIndicatorPropertiesCustomMetricParamsTotalMetrics0 struct {
	// Aggregation The aggregation type of the metric.
	Aggregation string `json:"aggregation"`

	// Field The field of the metric.
	Field string `json:"field"`

	// Filter The filter to apply to the metric.
	Filter *string `json:"filter,omitempty"`

	// Name The name of the metric. Only valid options are A-Z
	Name string `json:"name"`
}

// SLOsIndicatorPropertiesCustomMetricParamsTotalMetrics1 defines model for .
type SLOsIndicatorPropertiesCustomMetricParamsTotalMetrics1 struct {
	// Aggregation The aggregation type of the metric.
	Aggregation string `json:"aggregation"`

	// Filter The filter to apply to the metric.
	Filter *string `json:"filter,omitempty"`

	// Name The name of the metric. Only valid options are A-Z
	Name string `json:"name"`
}

// SLOsIndicatorPropertiesCustomMetric_Params_Total_Metrics_Item defines model for SLOs_indicator_properties_custom_metric.params.total.metrics.Item.
type SLOsIndicatorPropertiesCustomMetric_Params_Total_Metrics_Item struct {
	union json.RawMessage
}

// SLOsIndicatorPropertiesHistogram Defines properties for a histogram indicator type
type SLOsIndicatorPropertiesHistogram struct {
	// Params An object containing the indicator parameters.
	Params struct {
		// DataViewId The kibana data view id to use, primarily used to include data view runtime mappings. Make sure to save SLO again if you add/update run time fields to the data view and if those fields are being used in slo queries.
		DataViewId *string `json:"dataViewId,omitempty"`

		// Filter the KQL query to filter the documents with.
		Filter *string `json:"filter,omitempty"`

		// Good An object defining the "good" events
		Good struct {
			// Aggregation The type of aggregation to use.
			Aggregation string `json:"aggregation"`

			// Field The field use to aggregate the good events.
			Field string `json:"field"`

			// Filter The filter for good events.
			Filter *string `json:"filter,omitempty"`

			// From The starting value of the range. Only required for "range" aggregations.
			From *float32 `json:"from,omitempty"`

			// To The ending value of the range. Only required for "range" aggregations.
			To *float32 `json:"to,omitempty"`
		} `json:"good"`

		// Index The index or index pattern to use
		Index string `json:"index"`

		// TimestampField The timestamp field used in the source indice.
		TimestampField string `json:"timestampField"`

		// Total An object defining the "total" events
		Total struct {
			// Aggregation The type of aggregation to use.
			Aggregation string `json:"aggregation"`

			// Field The field use to aggregate the good events.
			Field string `json:"field"`

			// Filter The filter for total events.
			Filter *string `json:"filter,omitempty"`

			// From The starting value of the range. Only required for "range" aggregations.
			From *float32 `json:"from,omitempty"`

			// To The ending value of the range. Only required for "range" aggregations.
			To *float32 `json:"to,omitempty"`
		} `json:"total"`
	} `json:"params"`

	// Type The type of indicator.
	Type string `json:"type"`
}

// SLOsIndicatorPropertiesTimesliceMetric Defines properties for a timeslice metric indicator type
type SLOsIndicatorPropertiesTimesliceMetric struct {
	// Params An object containing the indicator parameters.
	Params struct {
		// DataViewId The kibana data view id to use, primarily used to include data view runtime mappings. Make sure to save SLO again if you add/update run time fields to the data view and if those fields are being used in slo queries.
		DataViewId *string `json:"dataViewId,omitempty"`

		// Filter the KQL query to filter the documents with.
		Filter *string `json:"filter,omitempty"`

		// Index The index or index pattern to use
		Index string `json:"index"`

		// Metric An object defining the metrics, equation, and threshold to determine if it's a good slice or not
		Metric struct {
			// Comparator The comparator to use to compare the equation to the threshold.
			Comparator string `json:"comparator"`

			// Equation The equation to calculate the metric.
			Equation string `json:"equation"`

			// Metrics List of metrics with their name, aggregation type, and field.
			Metrics []SLOsIndicatorPropertiesTimesliceMetric_Params_Metric_Metrics_Item `json:"metrics"`

			// Threshold The threshold used to determine if the metric is a good slice or not.
			Threshold float32 `json:"threshold"`
		} `json:"metric"`

		// TimestampField The timestamp field used in the source indice.
		TimestampField string `json:"timestampField"`
	} `json:"params"`

	// Type The type of indicator.
	Type string `json:"type"`
}

// SLOsIndicatorPropertiesTimesliceMetric_Params_Metric_Metrics_Item defines model for SLOs_indicator_properties_timeslice_metric.params.metric.metrics.Item.
type SLOsIndicatorPropertiesTimesliceMetric_Params_Metric_Metrics_Item struct {
	union json.RawMessage
}

// SLOsKqlWithFilters Defines properties for a filter
type SLOsKqlWithFilters struct {
	union json.RawMessage
}

// SLOsKqlWithFilters0 the KQL query to filter the documents with.
type SLOsKqlWithFilters0 = string

// SLOsKqlWithFilters1 defines model for .
type SLOsKqlWithFilters1 struct {
	Filters  *[]SLOsFilter `json:"filters,omitempty"`
	KqlQuery *string       `json:"kqlQuery,omitempty"`
}

// SLOsKqlWithFiltersGood The KQL query used to define the good events.
type SLOsKqlWithFiltersGood struct {
	union json.RawMessage
}

// SLOsKqlWithFiltersGood0 the KQL query to filter the documents with.
type SLOsKqlWithFiltersGood0 = string

// SLOsKqlWithFiltersGood1 defines model for .
type SLOsKqlWithFiltersGood1 struct {
	Filters  *[]SLOsFilter `json:"filters,omitempty"`
	KqlQuery *string       `json:"kqlQuery,omitempty"`
}

// SLOsKqlWithFiltersTotal The KQL query used to define all events.
type SLOsKqlWithFiltersTotal struct {
	union json.RawMessage
}

// SLOsKqlWithFiltersTotal0 the KQL query to filter the documents with.
type SLOsKqlWithFiltersTotal0 = string

// SLOsKqlWithFiltersTotal1 defines model for .
type SLOsKqlWithFiltersTotal1 struct {
	Filters  *[]SLOsFilter `json:"filters,omitempty"`
	KqlQuery *string       `json:"kqlQuery,omitempty"`
}

// SLOsObjective Defines properties for the SLO objective
type SLOsObjective struct {
	// Target the target objective between 0 and 1 excluded
	Target float32 `json:"target"`

	// TimesliceTarget the target objective for each slice when using a timeslices budgeting method
	TimesliceTarget *float32 `json:"timesliceTarget,omitempty"`

	// TimesliceWindow the duration of each slice when using a timeslices budgeting method, as {duraton}{unit}
	TimesliceWindow *string `json:"timesliceWindow,omitempty"`
}

// SLOsSettings Defines properties for SLO settings.
type SLOsSettings struct {
	// Frequency The interval between checks for changes in the source data. The minimum value is 1m and the maximum is 59m. The default value is 1 minute.
	Frequency *string `json:"frequency,omitempty"`

	// PreventInitialBackfill Start aggregating data from the time the SLO is created, instead of backfilling data from the beginning of the time window.
	PreventInitialBackfill *bool `json:"preventInitialBackfill,omitempty"`

	// SyncDelay The time delay in minutes between the current time and the latest source data time. Increasing the value will delay any alerting. The default value is 1 minute. The minimum value is 1m and the maximum is 359m. It should always be greater then source index refresh interval.
	SyncDelay *string `json:"syncDelay,omitempty"`

	// SyncField The date field that is used to identify new documents in the source. It is strongly recommended to use a field that contains the ingest timestamp. If you use a different field, you might need to set the delay such that it accounts for data transmission delays. When unspecified, we use the indicator timestamp field.
	SyncField *string `json:"syncField,omitempty"`
}

// SLOsSloDefinitionResponse defines model for SLOs_slo_definition_response.
type SLOsSloDefinitionResponse struct {
	// BudgetingMethod The budgeting method to use when computing the rollup data.
	BudgetingMethod SLOsBudgetingMethod `json:"budgetingMethod"`

	// CreatedAt The creation date
	CreatedAt string `json:"createdAt"`

	// Description The description of the SLO.
	Description string `json:"description"`

	// Enabled Indicate if the SLO is enabled
	Enabled bool `json:"enabled"`

	// GroupBy optional group by field or fields to use to generate an SLO per distinct value
	GroupBy SLOsGroupBy `json:"groupBy"`

	// Id The identifier of the SLO.
	Id        string                              `json:"id"`
	Indicator SLOsSloDefinitionResponse_Indicator `json:"indicator"`

	// Name The name of the SLO.
	Name string `json:"name"`

	// Objective Defines properties for the SLO objective
	Objective SLOsObjective `json:"objective"`

	// Revision The SLO revision
	Revision float32 `json:"revision"`

	// Settings Defines properties for SLO settings.
	Settings SLOsSettings `json:"settings"`

	// Tags List of tags
	Tags []string `json:"tags"`

	// TimeWindow Defines properties for the SLO time window
	TimeWindow SLOsTimeWindow `json:"timeWindow"`

	// UpdatedAt The last update date
	UpdatedAt string `json:"updatedAt"`

	// Version The internal SLO version
	Version float32 `json:"version"`
}

// SLOsSloDefinitionResponse_Indicator defines model for SLOsSloDefinitionResponse.Indicator.
type SLOsSloDefinitionResponse_Indicator struct {
	union json.RawMessage
}

// SLOsSloWithSummaryResponse defines model for SLOs_slo_with_summary_response.
type SLOsSloWithSummaryResponse struct {
	// BudgetingMethod The budgeting method to use when computing the rollup data.
	BudgetingMethod SLOsBudgetingMethod `json:"budgetingMethod"`

	// CreatedAt The creation date
	CreatedAt string `json:"createdAt"`

	// Description The description of the SLO.
	Description string `json:"description"`

	// Enabled Indicate if the SLO is enabled
	Enabled bool `json:"enabled"`

	// GroupBy optional group by field or fields to use to generate an SLO per distinct value
	GroupBy SLOsGroupBy `json:"groupBy"`

	// Id The identifier of the SLO.
	Id        string                               `json:"id"`
	Indicator SLOsSloWithSummaryResponse_Indicator `json:"indicator"`

	// InstanceId the value derived from the groupBy field, if present, otherwise '*'
	InstanceId string `json:"instanceId"`

	// Name The name of the SLO.
	Name string `json:"name"`

	// Objective Defines properties for the SLO objective
	Objective SLOsObjective `json:"objective"`

	// Revision The SLO revision
	Revision float32 `json:"revision"`

	// Settings Defines properties for SLO settings.
	Settings SLOsSettings `json:"settings"`

	// Summary The SLO computed data
	Summary SLOsSummary `json:"summary"`

	// Tags List of tags
	Tags []string `json:"tags"`

	// TimeWindow Defines properties for the SLO time window
	TimeWindow SLOsTimeWindow `json:"timeWindow"`

	// UpdatedAt The last update date
	UpdatedAt string `json:"updatedAt"`

	// Version The internal SLO version
	Version float32 `json:"version"`
}

// SLOsSloWithSummaryResponse_Indicator defines model for SLOsSloWithSummaryResponse.Indicator.
type SLOsSloWithSummaryResponse_Indicator struct {
	union json.RawMessage
}

// SLOsSummary The SLO computed data
type SLOsSummary struct {
	ErrorBudget SLOsErrorBudget   `json:"errorBudget"`
	SliValue    float32           `json:"sliValue"`
	Status      SLOsSummaryStatus `json:"status"`
}

// SLOsSummaryStatus defines model for SLOs_summary_status.
type SLOsSummaryStatus = string

// SLOsTimeWindow Defines properties for the SLO time window
type SLOsTimeWindow struct {
	// Duration the duration formatted as {duration}{unit}. Accepted values for rolling: 7d, 30d, 90d. Accepted values for calendar aligned: 1w (weekly) or 1M (monthly)
	Duration string `json:"duration"`

	// Type Indicates weither the time window is a rolling or a calendar aligned time window.
	Type string `json:"type"`
}

// SLOsTimesliceMetricBasicMetricWithField defines model for SLOs_timeslice_metric_basic_metric_with_field.
type SLOsTimesliceMetricBasicMetricWithField struct {
	// Aggregation The aggregation type of the metric.
	Aggregation string `json:"aggregation"`

	// Field The field of the metric.
	Field string `json:"field"`

	// Filter The filter to apply to the metric.
	Filter *string `json:"filter,omitempty"`

	// Name The name of the metric. Only valid options are A-Z
	Name string `json:"name"`
}

// SLOsTimesliceMetricDocCountMetric defines model for SLOs_timeslice_metric_doc_count_metric.
type SLOsTimesliceMetricDocCountMetric struct {
	// Aggregation The aggregation type of the metric. Only valid option is "doc_count"
	Aggregation string `json:"aggregation"`

	// Filter The filter to apply to the metric.
	Filter *string `json:"filter,omitempty"`

	// Name The name of the metric. Only valid options are A-Z
	Name string `json:"name"`
}

// SLOsTimesliceMetricPercentileMetric defines model for SLOs_timeslice_metric_percentile_metric.
type SLOsTimesliceMetricPercentileMetric struct {
	// Aggregation The aggregation type of the metric. Only valid option is "percentile"
	Aggregation string `json:"aggregation"`

	// Field The field of the metric.
	Field string `json:"field"`

	// Filter The filter to apply to the metric.
	Filter *string `json:"filter,omitempty"`

	// Name The name of the metric. Only valid options are A-Z
	Name string `json:"name"`

	// Percentile The percentile value.
	Percentile float32 `json:"percentile"`
}

// SLOsUpdateSloRequest The update SLO API request body varies depending on the type of indicator, time window and budgeting method. Partial update is handled.
type SLOsUpdateSloRequest struct {
	// BudgetingMethod The budgeting method to use when computing the rollup data.
	BudgetingMethod *SLOsBudgetingMethod `json:"budgetingMethod,omitempty"`

	// Description A description for the SLO.
	Description *string `json:"description,omitempty"`

	// GroupBy optional group by field or fields to use to generate an SLO per distinct value
	GroupBy   *SLOsGroupBy                    `json:"groupBy,omitempty"`
	Indicator *SLOsUpdateSloRequest_Indicator `json:"indicator,omitempty"`

	// Name A name for the SLO.
	Name *string `json:"name,omitempty"`

	// Objective Defines properties for the SLO objective
	Objective *SLOsObjective `json:"objective,omitempty"`

	// Settings Defines properties for SLO settings.
	Settings *SLOsSettings `json:"settings,omitempty"`

	// Tags List of tags
	Tags *[]string `json:"tags,omitempty"`

	// TimeWindow Defines properties for the SLO time window
	TimeWindow *SLOsTimeWindow `json:"timeWindow,omitempty"`
}

// SLOsUpdateSloRequest_Indicator defines model for SLOsUpdateSloRequest.Indicator.
type SLOsUpdateSloRequest_Indicator struct {
	union json.RawMessage
}

// SLOsSloId defines model for SLOs_slo_id.
type SLOsSloId = string

// SLOsSpaceId defines model for SLOs_space_id.
type SLOsSpaceId = string

// FindSlosOpParams defines parameters for FindSlosOp.
type FindSlosOpParams struct {
	// KqlQuery A valid kql query to filter the SLO with
	KqlQuery *string `form:"kqlQuery,omitempty" json:"kqlQuery,omitempty"`

	// Size The page size to use for cursor-based pagination, must be greater or equal than 1
	Size *int `form:"size,omitempty" json:"size,omitempty"`

	// SearchAfter The cursor to use for fetching the results from, when using a cursor-base pagination.
	SearchAfter *[]string `form:"searchAfter,omitempty" json:"searchAfter,omitempty"`

	// Page The page to use for pagination, must be greater or equal than 1
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of SLOs returned by page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// SortBy Sort by field
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// SortDirection Sort order
	SortDirection *string `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`

	// HideStale Hide stale SLOs from the list as defined by stale SLO threshold in SLO settings
	HideStale *bool `form:"hideStale,omitempty" json:"hideStale,omitempty"`
}

// GetSloOpParams defines parameters for GetSloOp.
type GetSloOpParams struct {
	// InstanceId the specific instanceId used by the summary calculation
	InstanceId *string `form:"instanceId,omitempty" json:"instanceId,omitempty"`
}

// GetDefinitionsOpParams defines parameters for GetDefinitionsOp.
type GetDefinitionsOpParams struct {
	// IncludeOutdatedOnly Indicates if the API returns only outdated SLO or all SLO definitions
	IncludeOutdatedOnly *bool `form:"includeOutdatedOnly,omitempty" json:"includeOutdatedOnly,omitempty"`

	// Tags Specify which SLO tags to query by (comma-separated list)
	Tags *string `form:"tags,omitempty" json:"tags,omitempty"`

	// Search Filters the SLOs by name
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Page The page to use for pagination, must be greater or equal than 1
	Page *float32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of SLOs returned by page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// CreateSloOpJSONRequestBody defines body for CreateSloOp for application/json ContentType.
type CreateSloOpJSONRequestBody = SLOsCreateSloRequest

// DeleteSloInstancesOpJSONRequestBody defines body for DeleteSloInstancesOp for application/json ContentType.
type DeleteSloInstancesOpJSONRequestBody = SLOsDeleteSloInstancesRequest

// UpdateSloOpJSONRequestBody defines body for UpdateSloOp for application/json ContentType.
type UpdateSloOpJSONRequestBody = SLOsUpdateSloRequest

type FindSlosOpResponse *SLOsFindSloResponse

type CreateSloOpResponse *SLOsCreateSloResponse

type DeleteSloInstancesOpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *SLOs400Response
	JSON401      *SLOs401Response
	JSON403      *SLOs403Response
}

type DeleteSloOpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *SLOs400Response
	JSON401      *SLOs401Response
	JSON403      *SLOs403Response
	JSON404      *SLOs404Response
}

type GetSloOpResponse *SLOsSloWithSummaryResponse

type UpdateSloOpResponse *SLOsSloDefinitionResponse

type ResetSloOpResponse *SLOsSloDefinitionResponse

type DisableSloOpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *SLOs400Response
	JSON401      *SLOs401Response
	JSON403      *SLOs403Response
	JSON404      *SLOs404Response
}

type EnableSloOpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *SLOs400Response
	JSON401      *SLOs401Response
	JSON403      *SLOs403Response
	JSON404      *SLOs404Response
}

type GetDefinitionsOpResponse *SLOsFindSloDefinitionsResponse
