package kbapi

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

// TODO: Update the call
// EndpointExceptionsCreateListResponse wraps the response from a <todo> call
type EndpointExceptionsCreateListResponse struct {
	StatusCode int
	Body       *EndpointExceptionsCreateListResponseBody
	Error      interface{}
	RawBody    io.ReadCloser
}

type EndpointExceptionsCreateListResponseBody struct {
	// CreatedAt Autogenerated date of object creation.
	CreatedAt string `json:"created_at,omitempty"`
	// CreatedBy Autogenerated value - user that created object.
	CreatedBy string `json:"created_by,omitempty"`
	// Description Describes the exception list.
	Description string `json:"description,omitempty"`
	// ID Exception list's identifier.
	ID        string `json:"id,omitempty"`
	Immutable bool   `json:"immutable,omitempty"`
	// ListID Exception list's human readable string identifier, e.g. `trusted-linux-processes`.
	ListID string `json:"list_id,omitempty"`
	// Meta Placeholder for metadata about the list container.
	Meta *map[string]interface{} `json:"meta,omitempty"`
	// Name The name of the exception list.
	Name string `json:"name,omitempty"`
	// NamespaceType Determines whether the exception container is available in all Kibana spaces or just the space
	// in which it is created, where:
	//
	// - `single`: Only available in the Kibana space in which it is created.
	// - `agnostic`: Available in all Kibana spaces.
	NamespaceType string `json:"namespace_type,omitempty"`
	// OsTypes Use this field to specify the operating system. Only enter one value.
	OsTypes *[]string `json:"os_types,omitempty"`
	// Tags String array containing words and phrases to help categorize exception containers.
	Tags *[]string `json:"tags,omitempty"`
	// TieBreakerID Field used in search to ensure all containers are sorted and returned correctly.
	TieBreakerID string `json:"tie_breaker_id,omitempty"`
	// Type The type of exception list to be created. Different list types may denote where they can be utilized.
	// Values are detection, rule_default, endpoint, endpoint_trusted_apps, endpoint_events, endpoint_host_isolation_exceptions, or endpoint_blocklists.
	Type string `json:"type,omitempty"`
	// UpdatedAt Autogenerated date of last object update.
	UpdatedAt string `json:"updated_at,omitempty"`
	// UpdatedBy Autogenerated value - user that last updated object.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Version The document version, automatically increasd on updates.
	Version int `json:"version,omitempty"`
	// VersionUnderscored The version id, normally returned by the API when the item was retrieved.
	// Use it ensure updates are done against the latest version.
	VersionUnderscored *string `json:"_version,omitempty"`
}

// newEndpointExceptionsCreateList returns a function that performs POST /api/endpoint_list API requests
func (api *API) newEndpointExceptionsCreateList() func(context.Context, ...RequestOption) (*EndpointExceptionsCreateListResponse, error) {
	return func(ctx context.Context, opts ...RequestOption) (*EndpointExceptionsCreateListResponse, error) {

		// Get instrumentation if available
		var instrument Instrumentation
		if i, ok := api.transport.(Instrumented); ok {
			instrument = i.InstrumentationEnabled()
		}

		// Start instrumentation span if available
		if instrument != nil {
			var newCtx context.Context
			newCtx = instrument.Start(ctx, "endpoint.exceptions.create_list")
			defer instrument.Close(newCtx)
			ctx = newCtx
		}

		path := "/api/endpoint_list"

		// Create HTTP request
		httpReq, err := http.NewRequestWithContext(ctx, http.MethodPost, path, nil)
		if err != nil {
			if instrument != nil {
				instrument.RecordError(ctx, err)
			}
			return nil, err
		}

		// Apply all the functional options
		for _, opt := range opts {
			if err := opt(httpReq); err != nil {
				if instrument != nil {
					instrument.RecordError(ctx, err)
				}
				return nil, err
			}
		}

		// Pre-request instrumentation
		if instrument != nil {
			instrument.BeforeRequest(httpReq, "endpoint.exceptions.create_list")
			if reader := instrument.RecordRequestBody(ctx, "endpoint.exceptions.create_list", httpReq.Body); reader != nil {
				httpReq.Body = reader
			}
		}

		// Execute request
		httpResp, err := api.transport.Perform(httpReq)

		if instrument != nil {
			instrument.AfterRequest(httpReq, "kibana", path)
		}

		if err != nil {
			if instrument != nil {
				instrument.RecordError(ctx, err)
			}
			return nil, err
		}

		// Prepare response
		resp := &EndpointExceptionsCreateListResponse{
			StatusCode: httpResp.StatusCode,
			RawBody:    httpResp.Body,
		}

		var result EndpointExceptionsCreateListResponseBody

		if httpResp.StatusCode == 200 {
			if err := json.NewDecoder(httpResp.Body).Decode(&result); err != nil {
				httpResp.Body.Close()
				if instrument != nil {
					instrument.RecordError(ctx, err)
				}
				return nil, err
			}
			resp.Body = &result
			return resp, nil
		} else {
			// For all non-200 responses
			bodyBytes, err := io.ReadAll(httpResp.Body)
			httpResp.Body.Close()
			if err != nil {
				if instrument != nil {
					instrument.RecordError(ctx, err)
				}
				return nil, fmt.Errorf("failed to read response body: %v", err)
			}

			// Try to decode as JSON
			var errorObj interface{}
			if err := json.Unmarshal(bodyBytes, &errorObj); err == nil {
				resp.Error = errorObj

				errorMessage, _ := json.Marshal(errorObj)

				if instrument != nil {
					instrument.RecordError(ctx, err)
				}
				return resp, fmt.Errorf("HTTP Status Code %d: %s", httpResp.StatusCode, errorMessage)
			} else {
				// Not valid JSON
				resp.Error = string(bodyBytes)
				if instrument != nil {
					instrument.RecordError(ctx, err)
				}
				return resp, fmt.Errorf("HTTP Status Code %d: %s", httpResp.StatusCode, string(bodyBytes))
			}
		}
	}
}
